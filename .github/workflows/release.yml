name: Release

on:
  pull_request: {}
  push:
    tags:
      - 'release/*'

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

permissions:
  contents: read

jobs:
  meta:
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    container:
      image: docker://rust:1.88-bullseye
    steps:
      - uses: actions/checkout@v4
      - run: cargo fetch
      - name: Run cargo metadata
        id: cargo
        shell: bash
        run: |
          set -euo pipefail
          v=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "hokay") | .version')
          echo "crate-version=$v" >> "$GITHUB_OUTPUT"
      - name: "Crate version ${{ steps.cargo.outputs.crate-version }}"
        run: |
          if [[ -z "${{ steps.cargo.outputs.crate-version }}" ]]; then
            echo "Crate version not found" >&2
            exit 1
          fi

      - name: Run git metadata
        id: git
        shell: bash
        run: |
          ref="${{ github.ref }}"
          if [[ "$ref" == refs/tags/release/* ]]; then
            echo version="${ref##refs/tags/release/}" >> "$GITHUB_OUTPUT"
            echo mode=release >> "$GITHUB_OUTPUT"
          else
            sha="${{ github.sha }}"
            echo version="v${{ steps.cargo.outputs.crate-version }}-git${sha:0:7}" >> "$GITHUB_OUTPUT"
            echo mode=test >> "$GITHUB_OUTPUT"
          fi

      - if: steps.git.outputs.mode == 'release'
        shell: bash
        run: |
          if [[ "v${{ steps.cargo.outputs.crate-version }}" != "${{ steps.git.outputs.version }}" ]]; then
            echo "::error ::Crate version v${{ steps.cargo.outputs.version }} does not match tag ${{ steps.git.outputs.version }}"
            exit 1
          fi
    outputs:
      repo: ghcr.io/${{ github.repository_owner }}/hokay
      mode: ${{ steps.git.outputs.mode }}
      version: ${{ steps.git.outputs.version }}

  build:
    needs: meta
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Run docker buildx build .
        run: |
          docker buildx build . \
            --tag ${{ needs.meta.outputs.repo }}:${{ needs.meta.outputs.version }} \
            --platform linux/amd64,linux/arm64 \
            --output type=oci,dest=oci.tar \
            --cache-from type=gha \
            --cache-to type=gha,mode=max
      - uses: actions/upload-artifact@v4
        with:
          name: oci-archive
          path: oci.tar

  package:
    needs: [meta, build]
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/download-artifact@v4
        with: { name: oci-archive }
      - name: Extract per-arch binaries
        run: |
          set -euo pipefail
          mkdir pkg
          for arch in amd64 arm64 ; do
            skopeo copy \
              --override-os linux \
              --override-arch $arch \
              oci-archive:oci.tar \
              docker-archive:img-$arch.tar
            # Extract the binary
            LAYER=$(tar -xOf img-$arch.tar manifest.json | jq -r '.[].Layers[]' | head -n1)
            tar -xOf img-$arch.tar $LAYER \
              | tar -xO usr/local/bin/hokay \
              > pkg/hokay-linux-$arch
            shasum -a 256 pkg/hokay-linux-$arch \
              > pkg/hokay-linux-$arch.sha256
          done
      - run: ls -Rlh pkg
      - uses: actions/upload-artifact@v4
        with:
          name: package
          path: pkg

  # If the release was skipped, list the built binaries.
  list:
    needs: [meta, package]
    if: needs.meta.outputs.mode == 'test'
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/download-artifact@v4
        with: { name: package }
      - run: ls -Rlh .

  # Publish a GitHub release with platform-specific static binaries.
  release:
    needs: [meta, build]
    if: needs.meta.outputs.mode == 'release'
    permissions:
      contents: write
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/download-artifact@v4
        with: { name: package }
      - uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          name: ${{ needs.meta.outputs.version }}
          files: hokay-*
          generate_release_notes: true

  container-registry:
    needs: [meta, build]
    # if: needs.meta.outputs.mode == 'release'
    permissions:
      contents: read
      packages: write
      id-token: write
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/download-artifact@v4
        with: { name: oci-archive }
      - run: skopeo login ghcr.io --username ${{ github.repository_owner }} --password "${{ secrets.GITHUB_TOKEN }}"
      - run: skopeo copy oci-archive:oci.tar docker://${{ needs.meta.outputs.repo }}:${{ needs.meta.outputs.version }}
      - uses: sigstore/cosign-installer@v3
      - run: cosign sign --yes ${{ needs.meta.outputs.repo }}:${{ needs.meta.outputs.version }}

  crate:
    # Only publish the crate after the rest of the release succeeds.
    needs: release
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    container:
      image: docker://rust:1.88-bullseye
    steps:
      - uses: actions/checkout@v4
      - run: cargo publish --dry-run
      - if: needs.meta.outputs.mode == 'release'
        run: cargo publish --token=${{ secrets.CRATESIO_TOKEN }}
