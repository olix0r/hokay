name: Release

on:
  pull_request: {}
  push:
    tags:
      - 'release/*'

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

permissions:
  contents: read

jobs:
  meta:
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    container: docker://ghcr.io/linkerd/dev:v47-rust
    steps:
      - uses: actions/checkout@v4
      - run: cargo fetch
      - name: Run cargo metadata
        id: cargo
        shell: bash
        run: |
          set -euo pipefail
          v=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "hokay") | .version')
          echo "crate-version=$v" >> "$GITHUB_OUTPUT"
      - name: "Crate version ${{ steps.cargo.outputs.crate-version }}"
        run: |
          if [[ -z "${{ steps.cargo.outputs.crate-version }}" ]]; then
            echo "Crate version not found" >&2
            exit 1
          fi

      - name: Run git metadata
        id: git
        shell: bash
        run: |
          ref="${{ github.ref }}"
          img='ghcr.io/${{ github.repository_owner }}/hokay'
          if [[ "$ref" == refs/tags/release/* ]]; then
            ver="${ref#refs/tags/release/}"
            echo version="$ver" >> "$GITHUB_OUTPUT"
            echo tags="${img}:${ver},${img}:latest" >> "$GITHUB_OUTPUT"
            echo mode=release >> "$GITHUB_OUTPUT"
          else
            sha="${{ github.sha }}"
            ver=v${{ steps.cargo.outputs.crate-version }}-git"${sha:0:7}"
            echo version="$ver" >> "$GITHUB_OUTPUT"
            echo tags="${img}:${ver}" >> "$GITHUB_OUTPUT"
            echo mode=test >> "$GITHUB_OUTPUT"
          fi
      - if: steps.git.outputs.mode == 'release'
        shell: bash
        run: |
          if [[ "v${{ steps.cargo.outputs.crate-version }}" != "${{ steps.git.outputs.version }}" ]]; then
            echo "::error ::Crate version v${{ steps.cargo.outputs.version }} does not match tag ${{ steps.git.outputs.version }}"
            exit 1
          fi
    outputs:
      repo: ghcr.io/${{ github.repository_owner }}/hokay
      mode: ${{ steps.git.outputs.mode }}
      version: ${{ steps.git.outputs.version }}
      tags: ${{ steps.git.outputs.tags }}
      image: ghcr.io/${{ github.repository_owner }}/hokay:${{ steps.git.outputs.version }}

  build:
    needs: meta
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      COSIGN_YES: 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: sigstore/cosign-installer@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        id: build
        with:
          cache-from: type=gha,scope=${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}
          platforms: linux/amd64,linux/arm64
          provenance: true
          push: true
          sbom: true
          tags: ${{ needs.meta.outputs.tags }}
      - run: echo '${{ needs.meta.outputs.tags }}' | xargs -d, -I{} cosign sign --recursive '{}@${{ steps.build.outputs.digest }}'
    outputs:
      image: ${{ needs.meta.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

  # Publish a GitHub release with platform-specific static binaries.
  release:
    needs: [meta, build]
    if: needs.meta.outputs.mode == 'release'
    permissions:
      contents: write
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    steps:
      - uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          name: ${{ needs.meta.outputs.version }}
          generate_release_notes: true

  crate:
    # Only publish the crate after the rest of the release succeeds.
    needs: [meta, release]
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    container:
      image: docker://rust:1.88-bullseye
    steps:
      - uses: actions/checkout@v4
      - run: cargo publish --dry-run
      - if: needs.meta.outputs.mode == 'release'
        run: cargo publish --token=${{ secrets.CRATESIO_TOKEN }}
