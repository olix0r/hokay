name: Release

on:
  pull_request: {}
  push:
    tags:
      - 'release/*'

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

permissions:
  contents: read

jobs:
  meta:
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    container: docker://ghcr.io/linkerd/dev:v47-rust
    steps:
      - uses: actions/checkout@v4
      - run: cargo fetch
      - name: Run cargo metadata
        id: cargo
        shell: bash
        run: |
          set -euo pipefail
          v=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "hokay") | .version')
          echo "crate-version=$v" >> "$GITHUB_OUTPUT"
      - name: "Crate version ${{ steps.cargo.outputs.crate-version }}"
        run: |
          if [[ -z "${{ steps.cargo.outputs.crate-version }}" ]]; then
            echo "Crate version not found" >&2
            exit 1
          fi

      - name: Run git metadata
        id: git
        shell: bash
        run: |
          ref="${{ github.ref }}"
          if [[ "$ref" == refs/tags/release/* ]]; then
            echo version="${ref##refs/tags/release/}" >> "$GITHUB_OUTPUT"
            echo mode=release >> "$GITHUB_OUTPUT"
          else
            sha="${{ github.sha }}"
            echo version="v${{ steps.cargo.outputs.crate-version }}-git${sha:0:7}" >> "$GITHUB_OUTPUT"
            echo mode=test >> "$GITHUB_OUTPUT"
          fi

      - if: steps.git.outputs.mode == 'release'
        shell: bash
        run: |
          if [[ "v${{ steps.cargo.outputs.crate-version }}" != "${{ steps.git.outputs.version }}" ]]; then
            echo "::error ::Crate version v${{ steps.cargo.outputs.version }} does not match tag ${{ steps.git.outputs.version }}"
            exit 1
          fi
    outputs:
      repo: ghcr.io/${{ github.repository_owner }}/hokay
      mode: ${{ steps.git.outputs.mode }}
      version: ${{ steps.git.outputs.version }}
      image: ghcr.io/${{ github.repository_owner }}/hokay:${{ steps.git.outputs.version }}

  build:
    needs: meta
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Run docker buildx build .
        run: |
          docker buildx build . \
            --tag ${{ needs.meta.outputs.image }} \
            --platform linux/amd64,linux/arm64 \
            --output type=oci,dest=oci.tar \
            --cache-from type=gha \
            --cache-to type=gha,mode=max
      - name: Compute digests
        id: digest
        shell: bash
        run: |
          set -euo pipefail
          d=$(tar xOf oci.tar index.json | jq -r '.manifests[].digest')
          manifest=$(tar xOf oci.tar blobs/sha256/"${d#sha256:}")
          for arch in amd64 arm64 ; do
            d=$(echo "$manifest" | jq -r ".manifests[] | select(.platform.os == \"linux\") | select(.platform.architecture == \"$arch\") | .digest")
            echo "$arch=${d#sha256:}" >> "$GITHUB_OUTPUT"
          done
          index=$(echo "$manifest" | shasum -a 256 | cut -d' ' -f1)
          echo index="$index" >> "$GITHUB_OUTPUT"
      - name: Output digests
        run: |
          jq . <<EOF
          ${{ toJson(steps.digest.outputs) }}
          EOF
      - uses: actions/upload-artifact@v4
        with:
          name: oci-archive
          path: oci.tar
    outputs:
      amd64: ${{ steps.digest.outputs.amd64 }}
      arm64: ${{ steps.digest.outputs.arm64 }}
      index: ${{ steps.digest.outputs.index }}

  sbom:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - uses: actions/download-artifact@v4
        with: { name: oci-archive }
      - run: skopeo copy oci-archive:oci.tar oci-archive:oci-amd64.tar --override-arch amd64
      - run: skopeo copy oci-archive:oci.tar oci-archive:oci-arm64.tar --override-arch arm64
      - run: mkdir -p sbom
      - run: syft scan oci-archive:oci-amd64.tar -o spdx-json > sbom/amd64.spdx.json
      - run: syft scan oci-archive:oci-arm64.tar -o spdx-json > sbom/arm64.spdx.json
      # TODO generate and attest the index sbom as well.
      - uses: actions/upload-artifact@v4
        with: { name: sbom, path: sbom }

  oci-push:
    needs: [meta, build, sbom]
    # if: needs.meta.outputs.mode == 'release'
    permissions:
      contents: read
      packages: write
      id-token: write
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: sigstore/cosign-installer@v3

      - uses: actions/download-artifact@v4
        with: { name: oci-archive }
      - run: skopeo copy oci-archive:oci.tar docker://${{ needs.meta.outputs.image }}

      - run: cosign sign ${{ needs.meta.outputs.image }}@sha256:${{ needs.build.outputs.amd64 }} --yes
      - run: cosign sign ${{ needs.meta.outputs.image }}@sha256:${{ needs.build.outputs.arm64 }} --yes
      - run: cosign sign ${{ needs.meta.outputs.image }}@sha256:${{ needs.build.outputs.index }} --yes

      - uses: actions/download-artifact@v4
        with: { name: sbom, path: sbom }
      - run: find . -ls
      - run: cosign attest ${{ needs.meta.outputs.image }}@sha256:${{ needs.build.outputs.amd64 }} --predicate sbom/amd64.spdx.json --type spdxjson --yes
      - run: cosign attest ${{ needs.meta.outputs.image }}@sha256:${{ needs.build.outputs.arm64 }} --predicate sbom/arm64.spdx.json --type spdxjson --yes
      # TODO attest the index sbom as well.

  # Publish a GitHub release with platform-specific static binaries.
  release:
    needs: [meta, oci-push]
    if: needs.meta.outputs.mode == 'release'
    permissions:
      contents: write
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    steps:
      - uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          name: ${{ needs.meta.outputs.version }}
          generate_release_notes: true

  oci-tag-latest:
    needs: [meta, build, sbom, oci-push]
    if: needs.meta.outputs.mode == 'release'
    permissions:
      contents: read
      packages: write
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: docker pull '${{ needs.meta.outputs.image }}@sha256:${{ needs.build.outputs.index }}' '${{ needs.meta.outputs.repo }}:latest'
      - run: docker tag '${{ needs.meta.outputs.image }}' '${{ needs.meta.outputs.repo }}:latest'
      - run: docker push '${{ needs.meta.outputs.repo }}:latest'

  crate:
    # Only publish the crate after the rest of the release succeeds.
    needs: [meta, release]
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    container:
      image: docker://rust:1.88-bullseye
    steps:
      - uses: actions/checkout@v4
      - run: cargo publish --dry-run
      - if: needs.meta.outputs.mode == 'release'
        run: cargo publish --token=${{ secrets.CRATESIO_TOKEN }}
